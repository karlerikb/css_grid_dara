
/* Defining Grid Elements */

.gameContainer, .piecesContainer, .gameboard, .menu {
  display: grid;
}


/* Game Container Element */

.gameContainer {
  grid-template-columns: [menu-start] 2fr 5fr 2fr [menu-end];
  grid-template-rows: auto [menu-start] auto auto [menu-end];
  grid-template-areas:
    "...............   menuButton       ..............."
    "playerOnePieces   gameboard        playerTwoPieces"
    "playerOnePieces   hintsContainer   playerTwoPieces"
  ;
  justify-items: center;
  align-items: start;
}

/* Pieces Container Element */

.piecesContainer {
  margin: 1vw 0;
  border-radius: 2px;
  padding: .5vw;
  grid-template-columns: repeat(2, auto);
  grid-template-rows: repeat(6, auto);
  gap: .5vw;
}

.piecesContainer.playerOne {
  grid-area: playerOnePieces;
  grid-template-areas:
    "p1_7   p1_1"
    "p1_8   p1_2"
    "p1_9   p1_3"
    "p1_10  p1_4"
    "p1_11  p1_5"
    "p1_12  p1_6"
  ;
}

.piecesContainer.playerTwo {
  grid-area: playerTwoPieces;
  grid-template-areas:
    "p2_1  p2_7 "
    "p2_2  p2_8 "
    "p2_3  p2_9 "
    "p2_4  p2_10"
    "p2_5  p2_11"
    "p2_6  p2_12"
  ;
}

.piecesContainer.playerOne.active { background: #afc1f1; }
.piecesContainer.playerTwo.active { background: #eeb1b1; }

.piecesContainer.active { border: 1px solid black; }

/* Gameboard Element */

.gameboard {
  margin: 1vw 0;
  border: 1px solid black;
  border-radius: 2px;
  padding: 1vw;
  grid-area: gameboard;
  gap: .5vw;
  grid-template-columns: repeat(6, 7vw);
  grid-template-rows: repeat(5, 7vw);
  grid-template-areas:
    "a11 a12 a13 a14 a15 a16"
    "a21 a22 a23 a24 a25 a26"
    "a31 a32 a33 a34 a35 a36"
    "a41 a42 a43 a44 a45 a46"
    "a51 a52 a53 a54 a55 a56"
  ;
  background: yellow;
  justify-items: center;
  align-items: center;
}

/* Hints Container Element */

.hintsContainer {
  border-radius: 2px;
  padding: 1vw;
  text-align: center;
  grid-area: hintsContainer
}


/* Game Piece Elements */

.piecesContainer.playerOne > .piece { background: royalblue; }
.piecesContainer.playerTwo > .piece { background: brown; }

.piecesContainer .piece {
  text-align: center;
  color: white;
}

.piecesContainer.active > .piece,
.piece.active,
.piece.inactive { cursor: pointer; }

.piece.active { box-shadow: 0 0 4px 1px #303030 !important; }
.piece.inactive { opacity: .5 !important; }



.gameboard .playerOne.piece { background: royalblue; }
.gameboard .playerTwo.piece { background: brown; }

.piece, .temporaryPosition {
  border: 1px solid black;
  border-radius: 2px;
  width: 6vw;
  height: 6vw;
  /* position: relative; */
}

.gameboard .temporaryPosition {
  border: 1px dashed #303030;
}

.gameboard .temporaryPosition:hover {
  cursor: pointer;
  background: lightgreen;
}


/* Game Menu Element */

.menu {
  border-radius: 5px;
  width: 100%;
  height: 100%;
  background: #3f4142;
  opacity: .95;
  grid-area: menu;
  grid-template-columns: 2fr 5fr 2fr;
  grid-template-rows: 1fr 4fr;
  grid-template-areas:
    "playerOneTitle  ............  playerTwoTitle"
    "..............  gameMenuList  .............."
  ;
  justify-items: center;
  align-items: center;
}

/* Menu Button Element */

.openMenuButton, .closeMenuButton {
  margin: 1vw 0;
  grid-area: menuButton;
  cursor: pointer;
  font-size: 2rem;
}

/* Player Titles, Menu List */

.playerOneTitle, .playerTwoTitle, .gameMenuList {
  border: 2px solid whitesmoke;
  border-radius: 5px;
  padding: 1vw;
  color: whitesmoke;
  background: #202020;
  opacity: 1;
  text-align: center;
}

/* Player Title */

.playerOneTitle { grid-area: playerOneTitle; }
.playerTwoTitle { grid-area: playerTwoTitle; }

/* Menu List */

.gameMenuList {
  grid-area: gameMenuList;
  align-self: start;
}

.gameMenuList > li {
  margin: 0;
  padding: 1.5vw 10vw;;
  list-style: none;
}

.gameMenuList > li:hover {
  color: #202020;
  background: whitesmoke;
  cursor: pointer;
}

/* Remove Element Class */

.removed { display: none !important; }
.notAllowed { cursor: not-allowed !important; }
.selectable { cursor: pointer !important; }


@media screen and (orientation: portrait) {

  /* Game Container Element */

  .gameContainer {
    grid-template-columns: 4rem [menu-start] 1fr [menu-end];
    grid-template-rows: [menu-start] 2fr 5fr 2fr [menu-end];
    grid-template-areas:
      "..........  playerTwoPieces"
      "menuButton  gameboard"
      "..........  playerOnePieces"
    ;
    align-items: center;
  }

  /* Pieces Container Element */

  .piecesContainer {
    padding: 1vw;
    grid-template-columns: repeat(6, auto);
    grid-template-rows: repeat(2, auto);
    gap: 1vw;
  }

  .piecesContainer.playerTwo {
    grid-template-areas: 
      "p2_7   p2_8   p2_9  p2_10  p2_11  p2_12"
      "p2_1   p2_2   p2_3  p2_4   p2_5   p2_6 "
    ;
  }

  .piecesContainer.playerOne {
    grid-template-areas:
      "p1_1   p1_2   p1_3  p1_4   p1_5   p1_6 "
      "p1_7   p1_8   p1_9  p1_10  p1_11  p1_12"
    ;
  }

  /* Gameboard Element */

  .gameboard {
    margin: 0;
    padding: 2vw;
    grid-template-columns: repeat(5, 12.9vw);
    grid-template-rows: repeat(6, 12.9vw);
    grid-template-areas: 
      "a16 a26 a36 a46 a56"
      "a15 a25 a35 a45 a55"
      "a14 a24 a34 a44 a54"
      "a13 a23 a33 a43 a53"
      "a12 a22 a32 a42 a52"
      "a11 a21 a31 a41 a51"
    ;
    gap: 1vw;
  }

  /* Hints Container Element */

  .hintsContainer {
    display: none;
  }

  /* Game Piece Elements */

  .piecesContainer .piece {
    width: 10.5vw;
    height: 10.5vw;
  }

  .piece, .temporaryPosition {
    width: 11.2vw;
    height: 11.2vw;
  }

  /* Game Menu Element */

  .menu {
    grid-template-columns: 1fr;
    grid-template-rows: 2fr 5fr 2fr;
    grid-template-areas:
      "playerOneTitle"
      "gameMenuList"
      "playerTwoTitle"
    ;
    justify-items: center;
    align-items: center;
  }

  /* Menu Button Elements */

  .openMenuButton, .closeMenuButton {
    margin: 0;
    justify-self: center;
    align-self: center;
  }

  /* Menu List */

  .gameMenuList {
    align-self: center;
  }

  .gameMenuList > li {
    padding: 2vw 15vw;;
  }
}



/* Animation */

:root {
  --targetPositionTop: 0px;
  --targetPositionLeft: 0px;
  /* temporary variable for development */
  --animationTime: 2s;
}

@keyframes animateMovementBetweenGrids {
  0% {
    top: 0px;
    left: 0px;
  }
  100% {
    top: var(--targetPositionTop);
    left: var(--targetPositionLeft);
  }
}

.moveBetweenGrids {
  position: relative;
  animation: animateMovementBetweenGrids var(--animationTime);
}